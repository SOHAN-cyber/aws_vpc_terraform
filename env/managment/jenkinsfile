pipeline{
    agent any
                       environment {
                       AWS_ACCESS_KEY_ID = credentials('100')
                       AWS_SECRET_ACCESS_KEY = credentials('100')
                    }
  tools {
  terraform 'terraform'
}
    stages{
    stage ('Cloning') {
    steps {
    git credentialsId: '80', url: 'https://github.com/SOHAN-cyber/aws_vpc_terraform.git'
    }
    }
        stage("Deploying  Infra"){
            steps{
                dir('env/managment/network/') {
                sh 'pwd'
                sh 'echo $WORKSPACE'
                sh 'ls'
                sh 'sudo chmod 777 /var/run/docker.sock'
     sh "docker run  --rm -v ${WORKSPACE}/env/managment/network/:/workdir -w /workdir   hashicorp/terraform:1.2.2 -e AWS_ACCESS_KEY=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY init"
     sh "docker run  --rm -v ${WORKSPACE}/env/managment/network/:/workdir -w /workdir   hashicorp/terraform:1.2.2 -e AWS_ACCESS_KEY=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY validate"
     sh "docker run  --rm -v ${WORKSPACE}/env/managment/network/:/workdir -w /workdir  hashicorp/terraform:1.2.2 -e AWS_ACCESS_KEY=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY  plan" 
     sh "docker run  --rm -v ${WORKSPACE}/env/managment/network/:/workdir -w /workdir  hashicorp/terraform:1.2.2 -e AWS_ACCESS_KEY=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY apply --auto-approve"
                }
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========A executed successfully========"
                }
                failure{
                    echo "========A execution failed========"
                }
            }
        }
    }
    post{
        always{
            echo "========always========"
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}
