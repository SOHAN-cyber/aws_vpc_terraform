pipeline{
    agent any
                       environment {
                       AWS_ACCESS_KEY_ID = credentials('100')
                       AWS_SECRET_ACCESS_KEY = credentials('100')
                    }
  tools {
  terraform 'terraform'
}
    stages{
    stage ('Cloning') {
    steps {
    git credentialsId: '80', url: 'https://github.com/SOHAN-cyber/aws_vpc_terraform.git'
    }
    }
        stage("Deploying  Infra"){
            steps{
                dir('env/managment/network/') {
                sh 'pwd'
                sh 'echo $WORKSPACE'
                sh 'ls'
                sh 'echo $dir'
                sh 'sudo chmod 777 /var/run/docker.sock'
                    task("${pwd}")
                }
            }
        }
     stage ('Deploying & provisioning Public subnet instances') {
        steps{
            dir('env/managment/public-subnet-instances') {
             sh 'pwd'
                sh 'echo $WORKSPACE'
                sh 'ls'
                sh 'sudo chmod 777 /var/run/docker.sock'
                task("${pwd}")
            }
       }
     }
     stage ('Deploying & provisioning Private subnet instances') {
        steps{
            dir('env/managment/private-subnet-instance/') {
             sh 'pwd'
                sh 'echo $WORKSPACE'
                sh 'ls'
                sh 'sudo chmod 777 /var/run/docker.sock'
                task("${pwd}")
            }
       }
     }
    stage ('Deploying & provisioning Load Balancer') {
        steps{
            dir('env/managment/alb/') {
             sh 'pwd'
                sh 'echo $WORKSPACE'
                sh 'ls'
                sh 'sudo chmod 777 /var/run/docker.sock'
                task("${pwd}")
            }
       }
     }
    stage ('Deploying & provisioning eks cluster') {
        steps{
            dir('env/managment/eks/') {
             sh 'pwd'
                sh 'echo $WORKSPACE'
                sh 'ls'
                task("${pwd}")
     sh 'aws eks update-kubeconfig --name tf-eks-cluster --region ap-south-1'
            }
       }
     }
     stage ("Deploying App in new eks cluster") {
        steps {
            build job: 'nodejs-pipeline'
        }
     }
}
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========A executed successfully========"
                }
                failure{
                    echo "========A execution failed========"
                }
            }
        }
void task(dir) {
     sh "docker run  --rm -v ${WORKSPACE}/${dir}:/workdir -w /workdir -e AWS_ACCESS_KEY=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY    hashicorp/terraform:1.2.2 init"
     sh "docker run  --rm -v ${WORKSPACE}/${dir}:/workdir -w /workdir -e AWS_ACCESS_KEY=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY   hashicorp/terraform:1.2.2 validate"
     sh "docker run  --rm -v ${WORKSPACE}/${dir}:/workdir -w /workdir -e AWS_ACCESS_KEY=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY  hashicorp/terraform:1.2.2  plan" 
     sh "docker run  --rm -v ${WORKSPACE}/${dir}:/workdir -w /workdir -e AWS_ACCESS_KEY=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY  hashicorp/terraform:1.2.2 apply --auto-approve"
}